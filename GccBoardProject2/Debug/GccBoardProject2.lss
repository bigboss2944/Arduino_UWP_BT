
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7a  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca3  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000117e5  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000139e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00013a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000a63  00000000  00000000  00013ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	26 d0       	rcall	.+76     	; 0xd2 <main>
  86:	52 c0       	rjmp	.+164    	; 0x12c <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  8a:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8f 77       	andi	r24, 0x7F	; 127
  92:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  94:	89 2f       	mov	r24, r25
  96:	80 6a       	ori	r24, 0xA0	; 160
  98:	85 b9       	out	0x05, r24	; 5
  9a:	08 95       	ret

0000009c <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	95 ff       	sbrs	r25, 5
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  aa:	08 95       	ret

000000ac <USART_Receive>:
}

unsigned char USART_Receive( void ){
	
	while ( !(UCSR0A & (1<<RXC0)) )
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	ec f7       	brge	.-6      	; 0xb0 <USART_Receive+0x4>
	;/* Get and return received data from buffer */
	return UDR0;
  b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	}
  ba:	08 95       	ret

000000bc <USART_Init>:

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	08 95       	ret

000000d2 <main>:
	}

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	USART_Init(MYUBRR);
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	f2 df       	rcall	.-28     	; 0xbc <USART_Init>
	//
	//ADCSRA |= (1<<ADSC);
	//
	//while ((ADCSRA & (1<<ADSC)) !=0);

	board_init();
  d8:	d8 df       	rcall	.-80     	; 0x8a <board_init>
  da:	25 9a       	sbi	0x04, 5	; 4
	
	DDRB |= (1<<DDB5); //Configure le pin 5 du port B en sortie, le reste en entrée
  dc:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1<<DDB4);
  de:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1<<DDB3);
  e0:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1<<DDB2);
  e2:	0f 2e       	mov	r0, r31
			//PINB|=(0<<PINB2);
			
			//USART_Transmit("%c led sont allumees",&carac);
		}
		else if(carac=='4'){
			PORTB=0x3C;
  e4:	fc e3       	ldi	r31, 0x3C	; 60
  e6:	ff 2e       	mov	r15, r31
  e8:	f0 2d       	mov	r31, r0
  ea:	08 e3       	ldi	r16, 0x38	; 56
			//PINB|=(0<<PINB2);
			
			//USART_Transmit("%c led sont allumees",&carac);
		}
		else if(carac=='3'){
			PORTB=0x38;
  ec:	10 e3       	ldi	r17, 0x30	; 48
		carac=USART_Receive();
		USART_Transmit(carac);
			
		if(carac=='1')
		{
			PORTB=0x20;
  ee:	d0 e2       	ldi	r29, 0x20	; 32
		//while ((ADCSRA & (1<<ADSC)) !=0);
		//
		//Ctemp = (ADC - 247)/1.22;
		//Ftemp = (Ctemp * 1.8) + 32;
		//
		carac=USART_Receive();
  f0:	dd df       	rcall	.-70     	; 0xac <USART_Receive>
  f2:	c8 2f       	mov	r28, r24
		USART_Transmit(carac);
  f4:	d3 df       	rcall	.-90     	; 0x9c <USART_Transmit>
  f6:	c1 33       	cpi	r28, 0x31	; 49
			
		if(carac=='1')
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x2c>
  fa:	d5 b9       	out	0x05, r29	; 5
		{
			PORTB=0x20;
  fc:	f9 cf       	rjmp	.-14     	; 0xf0 <main+0x1e>
  fe:	c2 33       	cpi	r28, 0x32	; 50
			//PINB&=(0<<PINB3);
			//PINB&=(0<<PINB2);
			
			//USART_Transmit("%s led est allumee",carac);
		}
		else if(carac=='2'){
 100:	11 f4       	brne	.+4      	; 0x106 <main+0x34>
 102:	15 b9       	out	0x05, r17	; 5
			PORTB=0x30;
 104:	f5 cf       	rjmp	.-22     	; 0xf0 <main+0x1e>
 106:	c3 33       	cpi	r28, 0x33	; 51
			//PINB|=(0<<PINB3);
			//PINB|=(0<<PINB2);
			
			//USART_Transmit("%c led sont allumees",&carac);
		}
		else if(carac=='3'){
 108:	11 f4       	brne	.+4      	; 0x10e <main+0x3c>
 10a:	05 b9       	out	0x05, r16	; 5
			PORTB=0x38;
 10c:	f1 cf       	rjmp	.-30     	; 0xf0 <main+0x1e>
 10e:	c4 33       	cpi	r28, 0x34	; 52
			//PINB|=(1<<PINB3);
			//PINB|=(0<<PINB2);
			
			//USART_Transmit("%c led sont allumees",&carac);
		}
		else if(carac=='4'){
 110:	11 f4       	brne	.+4      	; 0x116 <main+0x44>
 112:	f5 b8       	out	0x05, r15	; 5
			PORTB=0x3C;
 114:	ed cf       	rjmp	.-38     	; 0xf0 <main+0x1e>
 116:	c0 33       	cpi	r28, 0x30	; 48
			//PINB|=(1<<PINB3);
			//PINB|=(1<<PINB2);
			
			//USART_Transmit('4');
		}
		else if(carac=='0'){
 118:	59 f7       	brne	.-42     	; 0xf0 <main+0x1e>
 11a:	83 b1       	in	r24, 0x03	; 3
			//PORTB|=0x00;
			PINB|=(0<<PINB5);
 11c:	83 b9       	out	0x03, r24	; 3
 11e:	83 b1       	in	r24, 0x03	; 3
			PINB|=(0<<PINB4);
 120:	83 b9       	out	0x03, r24	; 3
 122:	83 b1       	in	r24, 0x03	; 3
			PINB|=(0<<PINB3);
 124:	83 b9       	out	0x03, r24	; 3
 126:	83 b1       	in	r24, 0x03	; 3
			PINB|=(0<<PINB2);
 128:	83 b9       	out	0x03, r24	; 3
 12a:	e2 cf       	rjmp	.-60     	; 0xf0 <main+0x1e>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
